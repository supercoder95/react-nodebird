{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import axios from 'axios';\nconst dummyUser = {\n  id: 1,\n  nickname: 'supercoder',\n  Posts: [],\n  Followings: [],\n  Followers: []\n};\nexport const initialState = {\n  isLoggingIn: false,\n  // 로그인 시도중\n  isLoggedIn: false,\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\nexport const SIGN_UP = 'SIGN_UP';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const LOG_IN_REQUSET = 'LOG_IN_REQUSET'; // 액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\n\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\n\nexport const LOG_OUT_REQUSET = 'LOG_OUT_REQUSET';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const loginAction = data => {\n  return dispatch => {\n    const state = getState();\n    dispatch(loginRequsetAction());\n    axios.get('/api/login').then(res => {\n      dispatch(loginSuccessAction(res.data));\n    }).catch(err => {\n      dispatch(loginFailureAction(err));\n    });\n  };\n};\nexport const loginRequsetAction = data => {\n  return {\n    type: 'LOG_IN_REQUSET',\n    data\n  };\n};\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP,\n    data\n  };\n};\nexport const signUpSuccess = {\n  type: 'SIGN_UP_SUCCESS'\n}; // export const loginSuccessAction = (data) => {\n//   return {\n//     type: 'LOG_IN_Success',\n//     data,\n//   }\n// };\n\nexport const logoutRequsetAction = data => {\n  return {\n    type: 'LOG_OUT_REQUSET',\n    data\n  };\n}; // export const loginFailureAction = (data) => {\n//   return {\n//     type: 'LOG_IN_FAILURE',\n//     data,\n//   }\n// };\n\nexport const signUp = data => {\n  return {\n    type: SIGN_UP,\n    data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN_REQUSET':\n      {\n        console.log('reducer login');\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: true\n        });\n      }\n\n    case 'LOG_IN_SUCCES':\n      {\n        console.log('login success');\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: false,\n          isLoggedIn: true,\n          me: _objectSpread(_objectSpread({}, action.data), {}, {\n            nickname: 'supercoder'\n          })\n        });\n      }\n\n    case 'LOG_IN_FAILURE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingIn: false,\n          isLoggedIn: false\n        });\n      }\n\n    case 'LOG_OUT_REQUSET':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingOut: true,\n          isLoggedIn: false\n        });\n      }\n\n    case 'LOG_OUT_SUCCESS':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingOut: false,\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case 'LOG_OUT_FAILURE':\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isLoggingOut: false,\n          isLoggedIn: false\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/reactNative/react-nodebird/prepare/front/reducers/user.js"],"names":["dummyUser","id","nickname","Posts","Followings","Followers","initialState","isLoggingIn","isLoggedIn","isLoggingOut","me","signUpData","loginData","SIGN_UP","SIGN_UP_SUCCESS","LOG_IN_REQUSET","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUSET","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","loginAction","data","dispatch","state","getState","loginRequsetAction","axios","get","then","res","loginSuccessAction","catch","err","loginFailureAction","type","signUpAction","signUpSuccess","logoutRequsetAction","signUp","reducer","action","console","log"],"mappings":"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","sourcesContent":["// import axios from 'axios';\r\n\r\nconst dummyUser = {\r\n  id: 1,\r\n  nickname: 'supercoder',\r\n  Posts: [],\r\n  Followings: [],\r\n  Followers: [],\r\n};\r\n\r\nexport const initialState = {\r\n  isLoggingIn: false, // 로그인 시도중\r\n  isLoggedIn: false,\r\n  isLoggingOut: false, // 로그아웃 시도중\r\n  me: null,\r\n  signUpData: {},\r\n  loginData: {},\r\n};\r\n\r\nexport const SIGN_UP = 'SIGN_UP';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\n\r\nexport const LOG_IN_REQUSET = 'LOG_IN_REQUSET'; // 액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS'; // 액션의 이름\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE'; // 액션의 이름\r\n\r\nexport const LOG_OUT_REQUSET = 'LOG_OUT_REQUSET';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\nexport const loginAction = (data) => {\r\n  return (dispatch) => {\r\n    const state = getState();\r\n    dispatch(loginRequsetAction())\r\n    axios.get('/api/login')\r\n      .then((res) => {\r\n        dispatch(loginSuccessAction(res.data));\r\n      })\r\n      .catch((err) => {\r\n        dispatch(loginFailureAction(err));\r\n      })\r\n  }\r\n}\r\n\r\nexport const loginRequsetAction = (data) => {\r\n  return {\r\n    type: 'LOG_IN_REQUSET',\r\n    data,\r\n  }\r\n};\r\n\r\nexport const signUpAction = (data) => {\r\n  return {\r\n    type: SIGN_UP,\r\n    data,\r\n  };\r\n};\r\n\r\nexport const signUpSuccess = {\r\n  type: 'SIGN_UP_SUCCESS',\r\n};\r\n\r\n\r\n// export const loginSuccessAction = (data) => {\r\n//   return {\r\n//     type: 'LOG_IN_Success',\r\n//     data,\r\n//   }\r\n// };\r\n\r\nexport const logoutRequsetAction = (data) => {\r\n  return {\r\n    type: 'LOG_OUT_REQUSET',\r\n    data,\r\n  }\r\n};\r\n\r\n// export const loginFailureAction = (data) => {\r\n//   return {\r\n//     type: 'LOG_IN_FAILURE',\r\n//     data,\r\n//   }\r\n// };\r\n\r\nexport const signUp = (data) => {\r\n  return {\r\n    type: SIGN_UP,\r\n    data,\r\n  }\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOG_IN_REQUSET': {\r\n      console.log('reducer login')\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true,\r\n      };\r\n    }\r\n    case 'LOG_IN_SUCCES': {\r\n      console.log('login success');\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: true,\r\n        me: { ...action.data, nickname: 'supercoder' },\r\n      };\r\n    }\r\n    case 'LOG_IN_FAILURE': {\r\n      return {\r\n        ...state,\r\n        isLoggingIn: false,\r\n        isLoggedIn: false,\r\n      };\r\n    }\r\n    case 'LOG_OUT_REQUSET': {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: true,\r\n        isLoggedIn: false,\r\n      };\r\n    }\r\n    case 'LOG_OUT_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isLoggedIn: false,\r\n        me: null,\r\n      };\r\n    }\r\n    case 'LOG_OUT_FAILURE': {\r\n      return {\r\n        ...state,\r\n        isLoggingOut: false,\r\n        isLoggedIn: false,\r\n      };\r\n    }\r\n    case SIGN_UP: {\r\n      return {\r\n        ...state,\r\n        signUpData: action.data,\r\n      };\r\n    }\r\n    default: {\r\n      return {\r\n        ...state,\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}