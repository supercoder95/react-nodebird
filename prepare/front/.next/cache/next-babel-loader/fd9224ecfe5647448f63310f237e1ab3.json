{"ast":null,"code":"import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUSET, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_FAILURE } from '../reducers/user'; // LogIn\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga login'); // const result = yield call(logInAPI, action.data);\n\n    yield delay(1000), yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      data: err.response.data\n    });\n  }\n} // LogOut\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //   const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUSET', logIn);\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUSET', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["D:/reactNative/react-nodebird/prepare/front/sagas/user.js"],"names":["all","fork","takeLatest","delay","put","axios","LOG_IN_REQUSET","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_FAILURE","logInAPI","data","post","logIn","action","console","log","type","err","response","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,GAAvC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,QAKO,kBALP,C,CAOA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAON,KAAK,CAACO,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAG;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADC,CAEC;;AACF,UAAMb,KAAK,CAAC,IAAD,CAAX,EACA,MAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEV,cADA;AAENI,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CADT;AAKD,GARD,CAQE,OAAOO,GAAP,EAAY;AACV,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAER,eADA;AAENE,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACF,C,CAED;;;AACA,SAASS,SAAT,GAAqB;AACjB,SAAOf,KAAK,CAACO,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAG;AACH;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AAEE,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACV,UAAMd,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAE,iBADA;AAENN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACF;;AAGH,UAAUW,UAAV,GAAuB;AACnB,QAAMpB,UAAU,CAAC,gBAAD,EAAmBW,KAAnB,CAAhB;AACH;;AAED,UAAUU,WAAV,GAAwB;AACpB,QAAMrB,UAAU,CAAC,iBAAD,EAAoBmB,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMxB,GAAG,CAAC,CACNC,IAAI,CAACqB,UAAD,CADE,EAENrB,IAAI,CAACsB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, takeLatest, delay, put } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport { \r\n    LOG_IN_REQUSET,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_OUT_FAILURE,\r\n} from '../reducers/user'\r\n\r\n// LogIn\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try{\r\n    console.log('saga login');\r\n      // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000),\r\n    yield put({\r\n        type: LOG_IN_SUCCESS,\r\n        data: action.data,\r\n    });\r\n  } catch (err) {\r\n      yield put({\r\n          type: LOG_OUT_FAILURE,\r\n          data: err.response.data,\r\n      });\r\n  }\r\n}\r\n\r\n// LogOut\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut() {\r\n    try{\r\n    //   const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    \r\n      yield put({\r\n          type: 'LOG_OUT_SUCCESS',\r\n      });\r\n    } catch (err) {\r\n        yield put({\r\n            type: \"LOG_OUT_FAILURE\",\r\n            data: err.response.data,\r\n        });\r\n    }\r\n  }\r\n\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest('LOG_IN_REQUSET', logIn);\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    yield takeLatest('LOG_OUT_REQUSET', logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}